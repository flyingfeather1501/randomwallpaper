#!/bin/bash
## randomwallpaper
##
## This is free and unencumbered software released into the public domain.
##
## Anyone is free to copy, modify, publish, use, compile, sell, or
## distribute this software, either in source code form or as a compiled
## binary, for any purpose, commercial or non-commercial, and by any
## means.
##
## In jurisdictions that recognize copyright laws, the author or authors
## of this software dedicate any and all copyright interest in the
## software to the public domain. We make this dedication for the benefit
## of the public at large and to the detriment of our heirs and
## successors. We intend this dedication to be an overt act of
## relinquishment in perpetuity of all present and future rights to this
## software under copyright law.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
## OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
## ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
## OTHER DEALINGS IN THE SOFTWARE.
##
## For more information, please refer to <http://unlicense.org>

#### Functions ####

rwp_init_vars () {
  # Initialize variables with default values
  OPTIND=1
  rwp_sleep_time_def=1m
  rwp_sleep_first=0
  rwp_cfg_file_set=0
  rwp_handler=('auto')
  rwp_cfg_used=0
  rwp_cfg=none
  rwp_handler_list=(mate gnome xfce pcmanfm pcmanfm-qt cinnamon feh deepin plasma)
  rwp_verbose=0
  rwp_oneshot=0

  rwp_dir=$(xdg-user-dir PICTURES)/Wallpapers

  # Use .rwp.cfg if it exists
  if [[ -f $HOME/.rwp.cfg ]]; then
    rwp_cfg_file_set=1
    rwp_cfg=$HOME/.rwp.cfg
  else
    rwp_cfg_file_set=0
  fi
}

# Handle Options
rwp_getopts () {
  while getopts "h?t:d:c:w:lvso" rwp_opt; do
    case "$rwp_opt" in
    h|\?)
        echo "
  Usage: randomwallpaper [OPTIONS]

  Options:
   -t <time>                Set global wait time (default:1m)
   -d <DIR>                 Set wallpaper directory (default:$rwp_dir)
   -s                       Sleep before changing wallpaper, overwrites -o
   -c <config file>         Use config file to set wait time for individual images
   -w <wallpaper handler>   Set wallpaper handler manually (default:auto)
   -l                       List all wallpaper handlers
   -o                       One shot mode: don't loop, just set it once
   -v                       Print out some debug information
   -h or -?                 Show help (this message)

  Config file:
   The contents after the last space in a line is passed to sleep.
   In the example, sleep 1m will run after setting
   more specific file name.png as the wallpaper.

  Config file example:
   more specific file name.png 1m
   less exact file name 3m
   file name 5m
  "
        exit 0
      ;;
    t)
      rwp_sleep_time_def=$OPTARG
      ;;
    d)
      rwp_dir=$OPTARG
      ;;
    c)
      rwp_cfg=$OPTARG
      rwp_cfg_file_set=1
      ;;
    w)
      rwp_handler[0]=noauto
      case "${OPTARG,,}" in
      mate)
          rwp_handler+=('mate')
          ;;
      gnome)
          rwp_handler+=('gnome')
          ;;
      xfce)
          rwp_handler+=('xfce')
          ;;
      lxde)
          rwp_handler+=('pcmanfm')
          ;;
      pcmanfm)
          rwp_handler+=('pcmanfm')
          ;;
      pcmanfm-qt)
          rwp_handler+=('pcmanfm-qt')
          ;;
      plasma|kde|plasma-desktop)
          rwp_handler+=('plasma')
          ;;
      cinnamon)
          rwp_handler+=('cinnamon')
          ;;
      feh)
          rwp_handler+=('feh')
          ;;
      deepin)
          rwp_handler+=('deepin')
          ;;
      *)
          IFS=,; echo Available wallpaper handlers: "${rwp_handler_list[*]}"
          exit 1
      esac
      ;;
    s)
      rwp_sleep_first=1
      ;;
    v)
      rwp_verbose=1
      ;;
    o)
      rwp_oneshot=1
      ;;
    l)
      IFS=,; echo Available wallpaper handlers: "${rwp_handler_list[*]}"
      exit 0
      ;;
    esac
  done
}

# Main Loop
rwp_loop () {

  while :; do

    # Rescan file list
    mapfile -t rwp_files <<EOF
    $(find "$rwp_dir"/*)
EOF

    # Randomly select a file
    rwp_wallpaper="${rwp_files[RANDOM % ${#rwp_files[@]}]}"

    [[ $rwp_verbose == 1 ]] && echo "rwp_wallpaper is $rwp_wallpaper"


    # Read rwp_sleep_time only when config file is set
    if [[ $rwp_cfg_file_set == 1 ]]; then
      # Read cfg file
      while read -r line; do
        if echo "$rwp_wallpaper" | grep "${line%\ *}" > /dev/null; then  # if rwp_wallpaper is in the cfg
          rwp_sleep_time=${line##*\ }  # set rwp_sleep_time to that defined in the cfg
          rwp_cfg_used=1
          [[ "$rwp_verbose" == 1 ]] && echo rwp_sleep_time for this image is "$rwp_sleep_time"
          break
        else
          rwp_cfg_used=0
        fi
      done < "$rwp_cfg"
    fi

    # Use default rwp_sleep_time
    if [[ $rwp_cfg_used == 0 || $rwp_cfg_file_set == 0 ]]; then
      rwp_sleep_time=$rwp_sleep_time_def
      [[ $rwp_verbose == 1 ]] && echo rwp_sleep_time for this image is not specified in config
    fi


    # sleep first if $rwp_sleep_first=1
    if [[ $rwp_sleep_first == 1 ]]; then
      sleep "$rwp_sleep_time"
    fi

    # for every handler, if $rwp_handler contains a handler, run it
    # No need to worry about auto, if $rwp_handler == auto it'd be set to
    # something else in rwp_detect
    for i in "${rwp_handler_list[@]}"; do
      [[ ${rwp_handler[*]} =~ $i ]] && rwp_set "$i" "$rwp_wallpaper"
    done

    [[ $rwp_oneshot == 1 ]] && break

    # sleep after if $rwp_sleep_first=0
    if [[ $rwp_sleep_first == 0 ]]; then
      sleep "$rwp_sleep_time"
    fi

  done
}


rwp_detect () {
  # Detect DE in use and start loops

  # MATE
  if [[
  $XDG_CURRENT_DESKTOP == "MATE" ||
  $XDG_CURRENT_DESKTOP == "mate" ]]; then
    rwp_handler=('mate')

  # Budgie
  elif [[
  $XDG_SESSION_DESKTOP == "budgie-desktop" ||
  $DESKTOP_SESSION == "budgie-desktop" ||
  $GDMSESSION == "budgie-desktop" ]]; then
    rwp_handler=('gnome')

  # Pantheon
  elif [[
  $XDG_SESSION_DESKTOP == "pantheon" ||
  $DESKTOP_SESSION == "pantheon" ||
  $GDMSESSION == "pantheon" ]]; then
    rwp_handler=('gnome')

  # GNOME & Cinnamon
  elif [[
  $XDG_CURRENT_DESKTOP == "GNOME" ||
  $XDG_CURRENT_DESKTOP == "gnome" ]]; then
    if [[ $GDMSESSION == "cinnamon" ]]; then
      rwp_handler=('cinnamon')
    else
      rwp_handler=('gnome')
    fi

  # Cinnamon
  elif [[ $XDG_CURRENT_DESKTOP == "X-Cinnamon" ]]; then
    rwp_handler=('cinnamon')

  # Unity
  elif [[ $XDG_CURRENT_DESKTOP == "Unity" ]]; then
    if [[ -z ${MIR_SERVER_NAME+x} ]]; then # Check if Mir is in use
      rwp_handler=('gnome') # It's not
    else
      rwp_exit "Unity with Mir" # It is
    fi

  # XFCE
  elif [[ $XDG_CURRENT_DESKTOP == "XFCE" ]]; then
    rwp_handler=('xfce')

  # LXDE
  elif [[ $XDG_CURRENT_DESKTOP == "LXDE" ]]; then
    rwp_handler=('pcmanfm')

  # LXQt
  elif [[
  $XDG_CURRENT_DESKTOP == "LXQt" ||
  $GDMSESSION == "lxqt" ]]; then
    rwp_handler=('pcmanfm-qt')

  # Deepin
  elif [[
  $XDG_CURRENT_DESKTOP == "Deepin" ||
  $GDMSESSION == "deepin" ]]; then
    rwp_handler=('deepin')

  # KDE
  elif [[
  $GDMSESSION == "plasma_desktop" ||
  $XDG_CURRENT_DESKTOP == "plasma" ]]; then
    rwp_handler=('plasma')

  # Other
  else
    rwp_exit "Desktop in use"
  fi
}

rwp_set () {
  case $1 in
    mate)
      gsettings set org.mate.background picture-filename "$2"
      ;;
    gnome)
      gsettings set org.gnome.desktop.background picture-uri "file://$2"
      ;;
    cinnamon)
      gsettings set org.cinnamon.desktop.background picture-uri "file://$2"
      ;;
    feh)
      feh --bg-fill "$2"
      ;;
    pcmanfm)
      pcmanfm --set-wallpaper "$2"
      ;;
    pcmanfm-qt)
      pcmanfm-qt --set-wallpaper "$2"
      ;;
    plasma)
        qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript "$(cat <<JS
var allDesktops = desktops();
print (allDesktops);
for (i=0;i<allDesktops.length;i++) {
    d = allDesktops[i];
    d.wallpaperPlugin = "org.kde.image";
    d.currentConfigGroup = Array("Wallpaper", "org.kde.image", "General");
    d.writeConfig("Image", "file://$2")
}
JS
      )"
      ;;
    xfce)
      export rwp_set_xfce_wspc=$(($(xfconf-query -c xfwm4 -p /general/workspace_count)-1))
      for ((i=rwp_set_xfce_wspc; i>=0; i--)); do
        xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor0/workspace$i/last-image -s "$2"
      done
      ;;
    deepin)
      gsettings set com.deepin.wrap.gnome.desktop.background picture-uri "$2"
      ;;
    *)
      echo "there's a problem when calling rwp_set"
      exit 1
      ;;
  esac
}

rwp_exit () {
  echo "$1 is not supported"
  exit 1
}

main () {
  rwp_init_vars
  rwp_getopts "$@"

  # check whether $rwp_dir exists
  if [[ ! -d "$rwp_dir" ]]; then
    echo "$rwp_dir does not exist"
    exit 1
  fi

  if [[ $rwp_verbose == 1 ]]; then
    echo "rwp_sleep_time_def is $rwp_sleep_time_def"
    echo "rwp_dir is $rwp_dir"
    echo "rwp_cfg is $rwp_cfg"
    echo "${rwp_handler[*]}"
  fi

  if [[ ${rwp_handler[0]} == auto ]]; then
    # Detect Desktop
    rwp_detect # will set rwp_handler according to environment variables
    [[ $rwp_verbose == 1 ]] && echo "Wallpaper handlers: ${rwp_handler[*]}" # it does not exist
    rwp_loop
  else # when rwp_handler is set
    [[ $rwp_verbose == 1 ]] && echo "Wallpaper handlers: ${rwp_handler[*]}"
    rwp_loop
  fi
}

main "$@"
